{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Valhalla dedicated server","text":""},{"location":"#overview","title":"Overview","text":"<p>Valhalla is an implementation of the Valheim dedicated server written in C++. Valhalla not only includes but expands on the Valheim server config. Some settings that are included are ZDO  send rates, world-generation, spawning and more. </p>"},{"location":"#world","title":"World","text":"<p>World loading is fully supported with an optional legacy mode to support loading very old worlds. Saving is also fully functional with  customizeable save times and compressed rolling backups.</p>"},{"location":"#logging","title":"Logging","text":"<p>Logging can be in color, have verbosity set per module, and other settings  (see easylogging++).</p> <p>Examples of command line arguments: </p> <p>Starts server with verbosity of Resource module set to 1   <pre><code>.\\Valhalla.exe -vmodule=VUtilsResource=1\n</code></pre></p> <p>Starts server with colors disabled and verbosity of Peer and PrefabModules set to 2 (notice the quotes)   <pre><code>.\\Valhalla.exe --no-colors \"-vmodule=Peer=2,PrefabManager=2\"\n</code></pre></p> <p>Starts server without backing up the last log and global verbosity set to 2   <pre><code>.\\Valhalla.exe --no-log-backup --v=2\n</code></pre></p> <p>Starts server with full verbosity enabled (spammy console)   <pre><code>.\\Valhalla.exe -v\n</code></pre></p> <p>Log files are backed up during restarts.</p>"},{"location":"#lua-api","title":"Lua API","text":"<p>Valhalla includes a feature-rich Lua API to manipulate the inner-workings  of the server. See the API reference for more details and  documentation.</p> <p>Several already-created mods are included with Valhalla to serve as  examples and demonstrations of what is possible with the API.</p> <p>Several of these implement core functionality of Valheim but can be removed. Note that this might affect sleeping and/or portals.</p> <p>An implementation of the BetterNetworking mod exists to support compatible mod. It fully supports compression and the other mod-specific settings (like send rates)  are already built into the server config.</p>"},{"location":"reference/","title":"Reference","text":"<p>Valhalla utilizes Lua to take advantage of many of the available  internal features. This is made possible with the sol Lua wrapper  library. </p> <p>See the code for the actual implementation and stuff that might not be fully included in this documentation</p>"},{"location":"reference/#api-reference-format","title":"API Reference format","text":""},{"location":"reference/#accessor","title":"Accessor","text":"<p>The word accessor when used in this documentation will  represent either methods or fields. A method is an accessor but  not all accessors are methods. The same thing goes for fields,  which will sometimes be referred to as properties.</p>"},{"location":"reference/#uppercase","title":"Uppercase","text":"<p>API References which start in uppercase (i.e. <code>Vector2i.new()</code>, <code>ZDOID.NONE</code>) generally belong to a class.</p>"},{"location":"reference/#lowercase","title":"Lowercase","text":"<p>API References which start in lowercase (i.e. <code>vector3.y</code>, <code>vector3:Distance(other)</code>) generally belong to a instantiated class object.</p>"},{"location":"reference/#parameter-naming","title":"Parameter naming","text":"Name Assumed type target/uuid/owner Int64 somethingHash number (value within int32_t) other same class type bytes Bytes container&lt;~&gt; sol container of specified types strings container&lt;string&gt; zone Vector2i"},{"location":"reference/#danger-zone","title":"Danger zone","text":"<p>Some usertypes are unsafe to store for long periods or outside the scope in which they are accessed from. These objects currently are:</p> <pre><code>`Peer`     \n`ZDO`\n</code></pre> <p><code>Peer</code> can be safely stored outside of any scope, but must be cleaned-up accordingly when a player disconnects</p> <p><code>ZDO</code> currently has no mechanism or callback that is invoked to notify  the mod of zdo deletion. An alternative to storing the ZDO would be to use zdo.id (<code>ZDOID</code>), which are completely safe to store (unless otherwise stated).</p> <p>Violating any of the above will result in hard-to-diagnose problems,  weird stuff, or the moon falling out of orbit.</p>"},{"location":"reference/enums/","title":"Enums","text":"<p>Several labeled constants are used throughout Valhalla, and they are listed here for easy reference.</p> <p>They can be accessed by the name of the enum table and the enum itself:</p> <p><code>TimeOfDay.DAY</code></p> <p><code>Flag.CHAIR</code></p>"},{"location":"reference/enums/#type","title":"<code>Type</code>","text":"Type Alias BOOL STRING STRINGS BYTES ZDOID VECTOR3 VECTOR2i QUATERNION INT8 INT16 SHORT INT32 INT, HASH INT64 LONG UINT8 BYTE UINT16 USHORT UINT32 UINT UINT64 ULONG FLOAT DOUBLE CHAR"},{"location":"reference/enums/#timeofday","title":"<code>TimeOfDay</code>","text":"TimeOfDay Value MORNING 240 DAY 270 AFTERNOON 900 NIGHT 1530"},{"location":"reference/enums/#chatmsgtype","title":"<code>ChatMsgType</code>","text":"ChatMsgType WHISPER NORMAL SHOUT PING"},{"location":"reference/enums/#flag","title":"<code>Flag</code>","text":"<p>Prefab flags which are to be masked together as bitmasks</p> Flag Description NONE Default flag SCALE Send initial scale FAR Is an object visible from far away SESSIONED Temporary client-ZDO PIECE Is a player-buildable object BED Is a bed DOOR Is a door CHAIR Is a chair SHIP Is a sailable ship FISH Is a swimming fish PLANT Is a player-plantable crop ARMATURE Is an armorstand that hold items ITEM Is a dropped ground item PICKABLE Is a player-interactible object PICKABLE_ITEM Is a pickable ground item COOKING Is a cooking station CRAFTING Is a crafting station SMELTING Is an ore-refining station BURNING Is a torch or other campfire type SUPPORT Is a supportable structure with strength BREAKABLE Is a destructible object capable of taking damage ATTACH Is a utility component that holds items in physical space ANIMAL Is a passive creature MONSTER Is a neutral or hostile creature TAME Is a tameable creature BREED Is a breedable creature MINEABLE_OLD Old class type useful only for leviathan MINEABLE Is a pickaxe-mineable object TREE Is an upright tree LOG Is a chopped down tree SFX Is a temporary sound object VFX Is a temporary visual effects object AOE Is a temporary attack object DUNGEON Is a dungeon object PLAYER Is a player character TOMBSTONE Is a player tombstone"},{"location":"reference/managers/dungeonmanager/","title":"DungeonManager","text":""},{"location":"reference/managers/dungeonmanager/#dungeonmanagergetdungeondungeonname","title":"<code>DungeonManager:GetDungeon(dungeonName)</code>","text":"<p>Returns <code>Dungeon</code> or <code>nil</code></p>"},{"location":"reference/managers/dungeonmanager/#dungeonmanagergeneratedungeon-pos-rot","title":"<code>DungeonManager:Generate(dungeon, pos, rot)</code>","text":"<p>Generate a dungeon at position with rotation</p>"},{"location":"reference/managers/modmanager/","title":"ModManager","text":""},{"location":"reference/managers/modmanager/#modmanagergetmodname","title":"<code>ModManager:GetMod(name)</code>","text":"<p>Returns <code>Mod</code> or <code>nil</code></p>"},{"location":"reference/managers/netmanager/","title":"NetManager","text":""},{"location":"reference/managers/netmanager/#netmanagergetpeeruuid","title":"<code>NetManager:GetPeer(uuid)</code>","text":"<p>Returns <code>Peer</code> or <code>nil</code></p> <p>Finds a peer by uuid</p>"},{"location":"reference/managers/netmanager/#netmanagerpeers","title":"<code>NetManager.peers</code>","text":"<p>Returns <code>container&lt;Peer&gt;</code></p> <p>Returns all online peers </p>"},{"location":"reference/managers/prefabmanager/","title":"PrefabManager","text":""},{"location":"reference/managers/prefabmanager/#prefabmanagergetprefabhash","title":"<code>PrefabManager:GetPrefab(hash)</code>","text":""},{"location":"reference/managers/prefabmanager/#prefabmanagergetprefabname","title":"<code>PrefabManager:GetPrefab(name)</code>","text":""},{"location":"reference/managers/prefabmanager/#prefabmanagerregistername-type-pos-flags-force","title":"<code>PrefabManager:Register(name, type, pos, flags, force)</code>","text":""},{"location":"reference/managers/prefabmanager/#prefabmanagerregisterdatareader-force","title":"<code>PrefabManager:Register(dataReader&amp;, force)</code>","text":""},{"location":"reference/managers/routemanager/","title":"RouteManager","text":""},{"location":"reference/managers/routemanager/#routemanagerregistersig-function","title":"<code>RouteManager:Register(sig, function)</code>","text":"<p>Registers a RoutedRpc function</p>"},{"location":"reference/managers/routemanager/#routemanagerinvokeviewtarget-zdoid-methodrepr","title":"<code>RouteManager:InvokeView(target, zdoid, methodRepr, ...)</code>","text":"<p>Invokes a RoutedRpc aimed towards a peer(s) specified ZNetView object</p> <p>Optionally accepts variadic args <code>...</code> that are passed to the remote function</p>"},{"location":"reference/managers/routemanager/#routemanagerinvoketarget-methodrepr","title":"<code>RouteManager:Invoke(target, methodRepr, ...)</code>","text":"<p>Invokes a RoutedRpc aimed towards a peer(s)</p>"},{"location":"reference/managers/routemanager/#routemanagerinvokeallmethodrepr","title":"<code>RouteManager:InvokeAll(methodRepr, ...)</code>","text":"<p>Invokes a RoutedRpc aimed towards all peers</p>"},{"location":"reference/managers/valhalla/","title":"Valhalla","text":""},{"location":"reference/managers/valhalla/#valhallaversion","title":"<code>Valhalla.version</code>","text":"<p>Returns <code>string</code></p> <p>Valheim version: <code>0.214.300</code></p>"},{"location":"reference/managers/valhalla/#valhalladelta","title":"<code>Valhalla.delta</code>","text":"<p>Returns <code>number</code> | readonly</p> <p>The delta time for this frame</p> <p>Equivalent to Unity <code>Time.deltaTime</code></p>"},{"location":"reference/managers/valhalla/#valhallaid","title":"<code>Valhalla.id</code>","text":"<p>Returns <code>Int64</code> | readonly</p> <p>The randomly generated server id.</p> <p>Used primarily for determining ZDO   ownership throughout gameplay.</p>"},{"location":"reference/managers/valhalla/#valhallananos","title":"<code>Valhalla.nanos</code>","text":"<p>Returns <code>Int64</code> | readonly</p> <p>The time in nanoseconds</p>"},{"location":"reference/managers/valhalla/#valhallatime","title":"<code>Valhalla.time</code>","text":"<p>Returns <code>number</code> | readonly</p> <p>The time in seconds</p> <p>Equivalent to Unity <code>Time.time</code></p>"},{"location":"reference/managers/valhalla/#valhallaworldtime","title":"<code>Valhalla.worldTime</code>","text":"<p>Returns <code>number</code></p> <p>The in-game time which determines the day/night cycle</p>"},{"location":"reference/managers/valhalla/#valhallaworldtimemultiplier","title":"<code>Valhalla.worldTimeMultiplier</code>","text":"<p>Returns <code>number</code></p> <p>The rate at which the worldTime advances. Setting to a value less than 1 will slow the rate    (might have weird client time-skip effects). Setting to a values greater than 1 will speed up the ingame time.</p> <p>A simple use-case of this is the ingame-sleep time skip, which rapidly progresses the time until morning. See the    Sleep mod   for more information regarding usages.</p>"},{"location":"reference/managers/valhalla/#valhallaworldticks","title":"<code>Valhalla.worldTicks</code>","text":"<p>Returns <code>number</code> | readonly</p> <p>Similar to worldTime but in C# <code>DateTime.Ticks</code></p>"},{"location":"reference/managers/valhalla/#valhalladay","title":"<code>Valhalla.day</code>","text":"<p>Returns <code>number</code></p> <p>The current integer day</p>"},{"location":"reference/managers/valhalla/#valhallatimeofday","title":"<code>Valhalla.timeOfDay</code>","text":"<p>Returns <code>number</code></p> <p>The current relative time of day. </p> <p>An entire cycle is 1800, where a new day starts at 270.</p> Time of day Start time End time Morning 240 270 Day 270 900 Afternoon 900 1530 Night 1530 240"},{"location":"reference/managers/valhalla/#valhallaismorning","title":"<code>Valhalla.isMorning</code>","text":"<p>Returns <code>boolean</code> | readonly</p> <p>Whether the current time is morning</p>"},{"location":"reference/managers/valhalla/#valhallaisday","title":"<code>Valhalla.isDay</code>","text":"<p>Returns <code>boolean</code> | readonly</p> <p>Whether the current time is day</p>"},{"location":"reference/managers/valhalla/#valhallaisafternoon","title":"<code>Valhalla.isAfternoon</code>","text":"<p>Returns <code>boolean</code> | readonly</p> <p>Whether the current time is the afternoon</p>"},{"location":"reference/managers/valhalla/#valhallaisnight","title":"<code>Valhalla.isNight</code>","text":"<p>Returns <code>boolean</code> | readonly</p> <p>Whether the current time is night</p>"},{"location":"reference/managers/valhalla/#valhallatomorrowmorning","title":"<code>Valhalla.tomorrowMorning</code>","text":"<p>Returns <code>number</code> | readonly</p> <p>The worldTime for the morning time pertaining to the current <code>day</code> + 1</p>"},{"location":"reference/managers/valhalla/#valhallatomorrow","title":"<code>Valhalla.tomorrow</code>","text":"<p>Returns <code>number</code> | readonly</p> <p>The worldTime for the day time pertaining to the current <code>day</code> + 1</p>"},{"location":"reference/managers/valhalla/#valhallatomorrowafternoon","title":"<code>Valhalla.tomorrowAfternoon</code>","text":"<p>Returns <code>number</code> | readonly</p> <p>The worldTime for the afternoon time pertaining to the current <code>day</code> + 1</p>"},{"location":"reference/managers/valhalla/#valhallatomorrownight","title":"<code>Valhalla.tomorrowNight</code>","text":"<p>Returns <code>number</code> | readonly</p> <p>The worldTime for the night time pertaining to the current <code>day</code> + 1</p>"},{"location":"reference/managers/valhalla/#valhallasubscribename-function","title":"<code>Valhalla:Subscribe(name, function)</code>","text":"<p>Subscribe to a game event</p> <p>The passed function will be called when the event fires</p> <pre><code>Valhalla:Subscribe('Enable', function()\n  -- Will be dispatched only once when all plugins are loaded\nend)\n\nValhalla:Subscribe('RouteInAll', 'ChatMessage', function(peer, targetZdoid, bytes)\n  -- Will be dispatched whenever a peer calls RoutedRpc that is aimed towards all online peers\nend)\n</code></pre> <p>Available event handlers:</p> Method Dispatched Passthrough Example <code>Enable</code> Server start <code>Valhalla:Subscribe('Enable', function() end)</code> <code>Disable</code> Server stop <code>Valhalla:Subscribe('Disable', function() end)</code> <code>Update</code> Server update loop <code>Valhalla:Subscribe('Update', function() end)</code> <code>Periodic</code> Once every second <code>Valhalla:Subscribe('Periodic', function() end)</code> <code>Connect</code> Any peer connects <code>Peer</code> <code>Valhalla:Subscribe('Connect', function(peer) end)</code> <code>Disconnect</code> Any peer disconnects <code>Peer</code> <code>Valhalla:Subscribe('Disconnect', function(peer) end)</code> <code>Join</code> Valid peer joins <code>Peer</code> <code>Valhalla:Subscribe('Join', function(peer) end)</code> <code>Quit</code> Valid peer quits <code>Peer</code> <code>Valhalla:Subscribe('Quit', function(peer) end)</code> <code>RpcIn</code> <code>Peer</code>, <code>...</code> <code>Valhalla:Subscribe('RpcIn', 'PeerInfo', function(peer, bytes) end)</code> <code>RpcOut</code> <code>Peer</code>, <code>...</code> <code>Valhalla:Subscribe('RpcOut', 'PeerInfo', function(peer, bytes) end)</code> <code>RouteIn</code> <code>Peer</code>, <code>ZDOID</code>, <code>...</code> <code>Valhalla:Subscribe('RouteIn', 'SetGlobalKey', function(peer, targetZdoid, key) end)</code> <code>RouteInAll</code> <code>Peer</code>, <code>ZDOID</code>, <code>...</code> <code>Valhalla:Subscribe('RouteInAll', 'DestroyZDO', function(peer, targetZdoid, bytes) end)</code> <code>RouteOut</code> <code>Peer</code>, <code>ZDOID</code>, <code>...</code> <code>Valhalla:Subscribe('RouteOut', 'SleepStart', function(peer, targetZdoid) end)</code> <code>RouteOutAll</code> <code>ZDOID</code>, <code>...</code> <code>Valhalla:Subscribe('RouteOutAll', 'GlobalKeys', function(targetZdoid, keys) end)</code> <code>Routed</code> <code>Peer-src</code> <code>Peer-dst</code>, <code>ZDOID</code>, <code>...</code> <code>Valhalla:Subscribe('RouteOutAll', 'AddItem', function(srcpeer, dstpeer, targetZdoid, item) end)</code> <code>Send</code> Server sends packet <code>Socket</code>, <code>Bytes</code> <code>Valhalla:Subscribe('Send', function(socket, bytes) end)</code> <code>Recv</code> Server receives packet <code>Socket</code>, <code>Bytes</code> <code>Valhalla:Subscribe('Recv', function(socket, bytes) end)</code> <code>POST</code> Event-modifier to run after the primary-event <p>Most of the events above are prefix methods like in Harmony. Similarly, there is a <code>POST</code> event that can be    called after the major event has taken place. This only applies to <code>Rpc&lt;&gt;</code> and <code>Route&lt;&gt;</code> events    (maybe also to some others not listed here).</p> <pre><code>-- Will be ran after the internal PeerInfo has taken place\nValhalla:Subscribe('RpcIn', 'PeerInfo' 'POST', function(peer, bytes) end)\n</code></pre> <p>Handlers using <code>POST</code> cannot be cancelled unless otherwise stated (because what would be cancelled after everything has already happened?).</p>"},{"location":"reference/managers/zdomanager/","title":"ZDOManager","text":"<p>Manager class for keeping client objects updated</p> <p>Danger</p> <p>Accessing ZDOs after they have been manually collected with <code>DestroyZDO</code> or automatically collected by a client will crash your program.</p> <p>Make sure to store ZDOs by their id instead of the ZDO itself.</p> <p>I need better formatting ideas for this, ie how to organize overloads and stuff,</p>"},{"location":"reference/managers/zdomanager/#zdomanagergetzdozdoid","title":"ZDOManager:GetZDO(zdoid)","text":"<p>Returns <code>ZDO</code> or <code>nil</code></p>"},{"location":"reference/managers/zdomanager/#zdomanagersomezdos","title":"ZDOManager:SomeZDOs...","text":"<p>Returns <code>container&lt;ZDO&gt;</code></p> <p>Find up to <code>max</code> ZDOs</p> Positional overloads<pre><code>ZDOManager:SomeZDOs(pos, radius, max, pred)\nZDOManager:SomeZDOs(pos, radius, max)\nZDOManager:SomeZDOs(pos, radius, max, prefabHash, flagsPresent, flagsAbsent)\nZDOManager:SomeZDOs(pos, radius, max, prefabName)\n</code></pre> Get up to 5 ZDOs near any joining player within 16m<pre><code>Valhalla:Subscribe('Join', function(peer)\nlocal zdos = ZDOManager:SomeZDOs(peer.pos, 16, 5)\n-- do stuff with zdos...\nend)\n</code></pre> <pre><code>ZDOManager:SomeZDOs(zone, max)\nZDOManager:SomeZDOs(zone, max, prefabHash, flagsPresent, flagsAbsent)\nZDOManager:SomeZDOs(zone, max, prefabName)\n</code></pre> <pre><code>ZDOManager:SomeZDOs(zone, max, pos, radius, prefabHash, flagsPresent, flagsAbsent)\nZDOManager:SomeZDOs(zone, max, pos, radius, prefabName)\n</code></pre>"},{"location":"reference/managers/zdomanager/#zdomanagergetzdos","title":"<code>ZDOManager:GetZDOs</code>","text":"<p>Returns <code>container&lt;ZDO&gt;</code></p> <p>Get all the ZDOs in world with optional specifiers:</p> <pre><code>ZDOManager:GetZDOs(prefabHash)\n\nZDOManager:GetZDOs(prefabName)\n\nZDOManager:GetZDOs(pos, radius, pred)\n\nZDOManager:GetZDOs(pos, radius)\nZDOManager:GetZDOs(pos, radius, prefabHash, flagsPresent, flagsAbsent)\nZDOManager:GetZDOs(pos, radius, prefabName)\n\nZDOManager:GetZDOs(zone, pred)\n\nZDOManager:GetZDOs(zone)\nZDOManager:GetZDOs(zone, prefabHash, flagsPresent, flagsAbsent)\nZDOManager:GetZDOs(zone, prefabName)\n\nZDOManager:GetZDOs(zone, pos, radius, prefabHash, flagsPresent, flagsAbsent)\nZDOManager:GetZDOs(zone, pos, radius, prefabName)\n</code></pre>"},{"location":"reference/managers/zdomanager/#zdomanageranyzdopos-radius-prefabhash-flagspresent-flagsabsent","title":"<code>ZDOManager:AnyZDO(pos, radius, prefabHash, flagsPresent, flagsAbsent)</code>","text":"<p>Returns <code>ZDO</code> or <code>nil</code></p> <p>Attempts to find any singular ZDO within a radius of position of prefab and flags</p> <pre><code>ZDOManager:AnyZDO(pos, radius, prefabName)\n</code></pre>"},{"location":"reference/managers/zdomanager/#zdomanageranyzdozone-prefabhash-flagspresent-flagsabsent","title":"<code>ZDOManager:AnyZDO(zone, prefabHash, flagsPresent, flagsAbsent)</code>","text":"<p>Returns <code>ZDO</code> or <code>nil</code></p> <p>Attempts to find any singular ZDO within a zone of prefab and flags</p> <pre><code>ZDOManager:AnyZDO(zone, prefabName)\n</code></pre>"},{"location":"reference/managers/zdomanager/#zdomanagernearestzdopos-radius-func","title":"<code>ZDOManager:NearestZDO(pos, radius, func)</code>","text":"<p>Returns <code>ZDO</code> or <code>nil</code></p> <p>Attempts to find the nearest ZDO within a radius of position passing a binary predicate</p> <pre><code>ZDOManager:NearestZDO(pos, radius, prefabHash, flagsPresent, flagsAbsent)\nZDOManager:NearestZDO(pos, radius, prefabName)\n</code></pre>"},{"location":"reference/managers/zdomanager/#zdomanagerforcesendzdozdoid","title":"<code>ZDOManager:ForceSendZDO(zdoid)</code>","text":"<p>Forcibly sends a ZDO to all clients, regardless of distance to peer or last revision time</p>"},{"location":"reference/managers/zdomanager/#zdomanagerdestroyzdozdo","title":"<code>ZDOManager:DestroyZDO(zdo)</code>","text":"<p>Destroys a ZDO on both the server side and on all clients</p>"},{"location":"reference/managers/zdomanager/#zdomanagerinstantiateprefab-pos-rot","title":"<code>ZDOManager:Instantiate(prefab, pos, rot)</code>","text":"<p>Returns <code>ZDO</code></p> <p>Instantiates a new ZDO with prefab at position with rotation</p> <p>Overloads which accept a prefab name or hash will throw if no prefab could be found</p> <pre><code>ZDOManager:Instantiate(prefab, pos)\nZDOManager:Instantiate(prefabName, pos, rot)\nZDOManager:Instantiate(prefabName, pos)\nZDOManager:Instantiate(prefabHash, pos, rot)\nZDOManager:Instantiate(prefabHash, pos)\nZDOManager:Instantiate(zdo)\n</code></pre>"},{"location":"reference/managers/zonemanager/","title":"ZoneManager","text":"<p>Manager class for all things related to world generation.</p> <p>Note: Zone / zone is a typedef for Vector2i and can be considered the same thing</p>"},{"location":"reference/managers/zonemanager/#zonemanagergeneratezonezone","title":"<code>ZoneManager:GenerateZone(zone)</code>","text":"<p>Forcibly generates a zone in world</p> <p>Will spawn all new features and vegetation with no deletion</p>"},{"location":"reference/managers/zonemanager/#zonemanagergetnearestfeaturename-pos","title":"<code>ZoneManager:GetNearestFeature(name, pos)</code>","text":"<p>Returns <code>FeatureInstance</code> or <code>nil</code></p> <p>Finds the nearest Feature to position with name </p>"},{"location":"reference/managers/zonemanager/#zonemanagerworldtozonepospos","title":"<code>ZoneManager:WorldToZonePos(pos)</code>","text":"<p>Returns <code>Zone</code></p> <p>Converts from world coordinates to zone coordinates</p>"},{"location":"reference/managers/zonemanager/#zonemanagerzonetoworldposzone","title":"<code>ZoneManager:ZoneToWorldPos(zone)</code>","text":"<p>Returns <code>Vector3</code></p> <p>Converts from zone coordinates to world coordinates</p>"},{"location":"reference/managers/zonemanager/#zonemanagerglobalkeys","title":"<code>ZoneManager.globalKeys</code>","text":"<p>Returns <code>container&lt;string&gt;</code></p> <p>The currently active global keys.    See Global keys   for more information.</p>"},{"location":"reference/usertypes/bytes/","title":"Bytes","text":"<p>A byte buffer used in io operations. </p> <p>Buffer operations are managed by sol container wrappers.  This means that this object is essentially a  <code>std::vector&lt;uint8_t&gt;</code>. See sol containers for more information.</p>"},{"location":"reference/usertypes/bytes/#bytesnew","title":"<code>Bytes.new()</code>","text":"<p>Returns <code>Bytes</code></p> <p>Creates an empty byte buffer</p>"},{"location":"reference/usertypes/bytes/#bytesnewother","title":"<code>Bytes.new(other)</code>","text":"<p>Returns <code>Bytes</code></p> <p>Creates an bytes buffer with contents copied from another buffer</p>"},{"location":"reference/usertypes/bytes/#bytesassignother","title":"<code>bytes:Assign(other)</code>","text":"<p>Assigns the contents from another buffer to this</p>"},{"location":"reference/usertypes/bytes/#bytesmoveother","title":"<code>bytes:Move(other)</code>","text":"<p>Efficiently moves the contents from another buffer to this</p>"},{"location":"reference/usertypes/bytes/#bytesswapother","title":"<code>bytes:Swap(other)</code>","text":"<p>Efficiently swaps the contents between another buffer and this</p>"},{"location":"reference/usertypes/datareader/","title":"DataReader","text":"<p>A deserializing utility. Is essentially a wrapper around a <code>Bytes</code> object</p> <p>Note: Any of the Read...() methods below will throw if the length is exceeded.  Objects which start with a 32-bit signed size will throw if the size is negative.</p>"},{"location":"reference/usertypes/datareader/#datareadernewbytes","title":"<code>DataReader.new(bytes)</code>","text":"<p>Returns <code>DataReader</code></p> <p>Constructs a DataReader using a specified byte buffer</p> <p>In the C++ implementation, this constructor accepts a Bytes reference.   I am not fully sure how this will work within Lua if passed an rvalue    (do those exist?).</p> <p>This object must not exist beyond the scope of its   underlying vector. Doing so will cause segfaults.</p>"},{"location":"reference/usertypes/datareader/#datareaderprovider","title":"<code>dataReader.provider</code>","text":"<p>Returns <code>Bytes&amp;</code></p> <p>The underlying byte buffer of the reader</p>"},{"location":"reference/usertypes/datareader/#datareaderpos","title":"<code>dataReader.pos</code>","text":"<p>Returns <code>number</code></p> <p>The current position of the reader</p> <p>Will throw if set position is invalid (negative or outside bounds)</p>"},{"location":"reference/usertypes/datareader/#datareaderreadbool","title":"<code>dataReader:ReadBool()</code>","text":"<p>Returns <code>boolean</code></p> <p>Reads a boolean from the stream and advances the position by <code>1</code></p>"},{"location":"reference/usertypes/datareader/#datareaderreadstring","title":"<code>dataReader:ReadString()</code>","text":"<p>Returns <code>string</code></p> <p>Reads a string from the stream and advances the position by <code>4 + &lt;size&gt;</code></p>"},{"location":"reference/usertypes/datareader/#datareaderreadstrings","title":"<code>dataReader:ReadStrings()</code>","text":"<p>Returns <code>strings</code></p> <p>Reads several strings from the stream and advances the position by <code>4 + &lt;count&gt;</code></p>"},{"location":"reference/usertypes/datareader/#datareaderreadbytes","title":"<code>dataReader:ReadBytes()</code>","text":"<p>Returns <code>Bytes</code></p> <p>Reads a byte buffer from the stream and advances the position by <code>4 + &lt;size&gt;</code></p>"},{"location":"reference/usertypes/datareader/#datareaderreadzdoid","title":"<code>dataReader:ReadZDOID()</code>","text":"<p>Returns <code>ZDOID</code></p> <p>Reads a ZDOID from the stream and advances the position by <code>12</code></p>"},{"location":"reference/usertypes/datareader/#datareaderreadvector3","title":"<code>dataReader:ReadVector3()</code>","text":"<p>Returns <code>Vector3</code></p> <p>Reads a Vector3 from the stream and advances the position by <code>12</code></p>"},{"location":"reference/usertypes/datareader/#datareaderreadvector2i","title":"<code>dataReader:ReadVector2i()</code>","text":"<p>Returns <code>Vector2i</code></p> <p>Reads a Vector2i from the stream and advances the position by <code>8</code></p>"},{"location":"reference/usertypes/datareader/#datareaderreadquaternion","title":"<code>dataReader:ReadQuaternion()</code>","text":"<p>Returns <code>Quaternion</code></p> <p>Reads a Quaternion from the stream and advances the position by <code>16</code></p>"},{"location":"reference/usertypes/datareader/#datareaderreadprofile","title":"<code>dataReader:ReadProfile()</code>","text":"<p>Returns <code>UserProfile</code></p> <p>Reads a UserProfile from the stream and advances the position by <code>16</code></p>"},{"location":"reference/usertypes/datareader/#datareaderreadint8","title":"<code>dataReader:ReadInt8()</code>","text":"<p>Returns <code>number</code></p> <p>Reads an 8-bit signed integer from the stream and advances the position by <code>1</code></p>"},{"location":"reference/usertypes/datareader/#datareaderreadint16","title":"<code>dataReader:ReadInt16()</code>","text":"<p>Returns <code>number</code></p> <p>Reads a 16-bit signed integer from the stream and advances the position by <code>2</code></p>"},{"location":"reference/usertypes/datareader/#datareaderreadint32","title":"<code>dataReader:ReadInt32()</code>","text":"<p>Returns <code>number</code></p> <p>Reads a 32-bit signed integer from the stream and advances the position by <code>4</code></p>"},{"location":"reference/usertypes/datareader/#datareaderreadint64","title":"<code>dataReader:ReadInt64()</code>","text":"<p>Returns <code>Int64</code></p> <p>Reads a 64-bit signed integer from the stream and advances the position by <code>8</code></p>"},{"location":"reference/usertypes/datareader/#datareaderreaduint8","title":"<code>dataReader:ReadUInt8()</code>","text":"<p>Returns <code>number</code></p> <p>Reads an 8-bit unsigned integer from the stream and advances the position by <code>1</code></p>"},{"location":"reference/usertypes/datareader/#datareaderreaduint16","title":"<code>dataReader:ReadUInt16()</code>","text":"<p>Returns <code>number</code></p> <p>Reads an 16-bit unsigned integer from the stream and advances the position by <code>2</code></p>"},{"location":"reference/usertypes/datareader/#datareaderreaduint32","title":"<code>dataReader:ReadUInt32()</code>","text":"<p>Returns <code>number</code></p> <p>Reads an 32-bit unsigned integer from the stream and advances the position by <code>4</code></p>"},{"location":"reference/usertypes/datareader/#datareaderreaduint64","title":"<code>dataReader:ReadUInt64()</code>","text":"<p>Returns <code>UInt64</code></p> <p>Reads an 64-bit unsigned integer from the stream and advances the position by <code>8</code></p>"},{"location":"reference/usertypes/datareader/#datareaderreadfloat","title":"<code>dataReader:ReadFloat()</code>","text":"<p>Returns <code>number</code></p> <p>Reads a 32-bit floating point number from the stream and advances the position by <code>4</code></p>"},{"location":"reference/usertypes/datareader/#datareaderreaddouble","title":"<code>dataReader:ReadDouble()</code>","text":"<p>Returns <code>number</code></p> <p>Reads a 64-bit floating point number from the stream and advances the position by <code>8</code></p>"},{"location":"reference/usertypes/datareader/#datareaderreadchar","title":"<code>dataReader:ReadChar()</code>","text":"<p>Returns <code>number</code></p> <p>Reads a variable length UTF8 character from the stream and advances the position by a max of <code>3</code></p>"},{"location":"reference/usertypes/datawriter/","title":"DataWriter","text":"<p>A fast utility class for serializing objects</p> <p>None of the write methods below check for overflows or sign, so use them correctly.</p>"},{"location":"reference/usertypes/datawriter/#datawriternewbytes","title":"<code>DataWriter.new(bytes)</code>","text":"<p>Returns <code>DataWriter</code></p> <p>Constructs a DataWriter using a specified buffer</p> <p>This object must not exist beyond the scope of its   underlying vector. Doing so will cause segfaults.</p>"},{"location":"reference/usertypes/datawriter/#datawriterprovider","title":"<code>dataWriter.provider</code>","text":"<p>Returns <code>Bytes</code></p> <p>The underlying buffer of the writer</p>"},{"location":"reference/usertypes/datawriter/#datawriterpos","title":"<code>dataWriter.pos</code>","text":"<p>Returns <code>number</code></p> <p>The current position of the writer</p> <p>Will throw if set position is invalid (negative or outside bounds)</p>"},{"location":"reference/usertypes/datawriter/#datawriterclear","title":"<code>dataWriter:Clear()</code>","text":"<p>Clears the underlying buffer and sets <code>pos</code> to 0</p>"},{"location":"reference/usertypes/datawriter/#datawriterwriteobject","title":"<code>dataWriter:Write(object)</code>","text":"<p>An overload for writing an object to the underlying buffer</p> <p>Accepts: <code>boolean</code>, <code>string</code>, <code>strings</code>, <code>Bytes</code>, <code>ZDOID</code>, <code>Vector3</code>,    <code>Vector2i</code>, <code>Quaternion</code>, <code>UserProfile</code>, <code>Int64</code>, <code>UInt64</code></p>"},{"location":"reference/usertypes/datawriter/#datawriterwriteint8value","title":"<code>dataWriter:WriteInt8(value)</code>","text":"<p>Writes a <code>number</code> as a signed 8 bit integer</p>"},{"location":"reference/usertypes/datawriter/#datawriterwriteint16value","title":"<code>dataWriter:WriteInt16(value)</code>","text":"<p>Writes a <code>number</code> as a signed 16 bit integer</p>"},{"location":"reference/usertypes/datawriter/#datawriterwriteint32value","title":"<code>dataWriter:WriteInt32(value)</code>","text":"<p>Writes a <code>number</code> as a signed 32 bit integer</p>"},{"location":"reference/usertypes/datawriter/#datawriterwriteint64value","title":"<code>dataWriter:WriteInt64(value)</code>","text":"<p>Writes a <code>Int64</code> as a signed 64 bit integer</p>"},{"location":"reference/usertypes/datawriter/#datawriterwriteuint8value","title":"<code>dataWriter:WriteUInt8(value)</code>","text":"<p>Writes a <code>number</code> as an unsigned 8 bit integer</p>"},{"location":"reference/usertypes/datawriter/#datawriterwriteuint16value","title":"<code>dataWriter:WriteUInt16(value)</code>","text":"<p>Writes a <code>number</code> as an unsigned 16 bit integer</p>"},{"location":"reference/usertypes/datawriter/#datawriterwriteuint32value","title":"<code>dataWriter:WriteUInt32(value)</code>","text":"<p>Writes a <code>number</code> as an unsigned 32 bit integer</p>"},{"location":"reference/usertypes/datawriter/#datawriterwriteuint64value","title":"<code>dataWriter:WriteUInt64(value)</code>","text":"<p>Writes a <code>UInt64</code> as an unsigned 64 bit integer</p>"},{"location":"reference/usertypes/datawriter/#datawriterwritefloatvalue","title":"<code>dataWriter:WriteFloat(value)</code>","text":"<p>Writes a <code>number</code> as an 32 bit floating point number</p>"},{"location":"reference/usertypes/datawriter/#datawriterwritedoublevalue","title":"<code>dataWriter:WriteDouble(value)</code>","text":"<p>Writes a <code>number</code> as an 64 bit floating point number</p>"},{"location":"reference/usertypes/datawriter/#datawriterwritecharvalue","title":"<code>dataWriter:WriteChar(value)</code>","text":"<p>Writes a <code>number</code> as a variable length UTF8 character</p> <p>Must fit within a c++ <code>char16_t</code></p> <p>Up to <code>3</code> bytes will be written</p>"},{"location":"reference/usertypes/int64/","title":"Int64","text":"<p>Wrapper type for 64-bit integers because of Luas inability to support them</p>"},{"location":"reference/usertypes/int64/#int64new","title":"<code>Int64.new(...)</code>","text":"<p>Returns <code>Int64</code></p> <p><code>Int64.new()</code>, <code>Int64.new(number)</code>, <code>Int64.new(lower, upper)</code>,     <code>Int64.new(hexstring)</code></p>"},{"location":"reference/usertypes/int64/#int64tonumber","title":"<code>int64:tonumber()</code>","text":"<p>Returns <code>number</code></p> <p>Directly returns the underlying value as a Lua number</p> <p>This should only be called assuming the integral value      can be represented by a double (up to numbers ~2^35)</p>"},{"location":"reference/usertypes/int64/#metamethods-operators","title":"Metamethods / operators","text":""},{"location":"reference/usertypes/int64/#int64__add","title":"<code>int64:__add()</code>","text":"<p>Returns <code>Int64</code></p>"},{"location":"reference/usertypes/int64/#int64__sub","title":"<code>int64:__sub()</code>","text":"<p>Returns <code>Int64</code></p>"},{"location":"reference/usertypes/int64/#int64__mul","title":"<code>int64:__mul()</code>","text":"<p>Returns <code>Int64</code></p>"},{"location":"reference/usertypes/int64/#int64__div","title":"<code>int64:__div()</code>","text":"<p>Returns <code>Int64</code></p>"},{"location":"reference/usertypes/int64/#int64__divi","title":"<code>int64:__divi()</code>","text":"<p>Returns <code>Int64</code></p>"},{"location":"reference/usertypes/int64/#int64__unm","title":"<code>int64:__unm()</code>","text":"<p>Returns <code>Int64</code></p> <p>Unary minus</p> <p><code>-int64</code></p>"},{"location":"reference/usertypes/int64/#int64__eq","title":"<code>int64:__eq()</code>","text":"<p>Returns <code>Int64</code></p>"},{"location":"reference/usertypes/int64/#int64__lt","title":"<code>int64:__lt()</code>","text":"<p>Returns <code>Int64</code></p>"},{"location":"reference/usertypes/int64/#int64__leq","title":"<code>int64:__leq()</code>","text":"<p>Returns <code>Int64</code></p>"},{"location":"reference/usertypes/methodsig/","title":"MethodSig","text":"<p>A structure which represents a handle to an arbitrary method.</p> <p>Used for custom RPC or RoutedRpc registrations.</p>"},{"location":"reference/usertypes/methodsig/#methodsignewname","title":"<code>MethodSig.new(name, ...)</code>","text":"<p>Returns <code>MethodSig</code></p> <p>Constructs a <code>MethodSig</code> object expecting a <code>string</code> for name    and variadic arguments <code>...</code> for the function parameters.</p> <pre><code>local SIG_SleepStart = MethodSig.new('SleepStart')\n\nlocal SIG_Discover = MethodSig.new(\"DiscoverClosestLocation\", \n    Type.STRING, Type.VECTOR3, Type.STRING, Type.INT32, Type.BOOL\n)\n\n-- https://github.com/M4cs/Valheim-Server-RPC-Guide#our-custom-handlers\nlocal SIG_RequestServerAnnouncement = MethodSig.new('RequestServerAnnouncement', Type.BYTES)\n</code></pre>"},{"location":"reference/usertypes/mod/","title":"Mod","text":""},{"location":"reference/usertypes/mod/#modname","title":"<code>mod.name</code>","text":"<p>Returns <code>string</code></p> <p>The name of the mod</p>"},{"location":"reference/usertypes/mod/#modversion","title":"<code>mod.version</code>","text":"<p>Returns <code>string</code></p> <p>The version of the mod</p>"},{"location":"reference/usertypes/mod/#modapiversion","title":"<code>mod.apiVersion</code>","text":"<p>Returns <code>string</code></p> <p>The api version of the mod</p>"},{"location":"reference/usertypes/mod/#moddescription","title":"<code>mod.description</code>","text":"<p>Returns <code>string</code></p> <p>The description of the mod</p>"},{"location":"reference/usertypes/mod/#modauthors","title":"<code>mod.authors</code>","text":"<p>Returns <code>container&lt;string&gt;</code></p> <p>The authors of the mod</p>"},{"location":"reference/usertypes/peer/","title":"Peer","text":""},{"location":"reference/usertypes/peer/#peervisibleonmap","title":"<code>peer.visibleOnMap</code>","text":"<p>Returns <code>boolean</code></p>"},{"location":"reference/usertypes/peer/#peeradmin","title":"<code>peer.admin</code>","text":"<p>Returns <code>boolean</code></p>"},{"location":"reference/usertypes/peer/#peercharacterid","title":"<code>peer.characterID</code>","text":"<p>Returns <code>ZDOID</code> | readonly</p>"},{"location":"reference/usertypes/peer/#peername","title":"<code>peer.name</code>","text":"<p>Returns <code>string</code> | readonly</p>"},{"location":"reference/usertypes/peer/#peerpos","title":"<code>peer.pos</code>","text":"<p>Returns <code>Vector3</code></p> <p>The occasionally updated position of the Peer</p>"},{"location":"reference/usertypes/peer/#peeruuid","title":"<code>peer.uuid</code>","text":"<p>Returns <code>Int64</code> | readonly</p>"},{"location":"reference/usertypes/peer/#peersocket","title":"<code>peer.socket</code>","text":"<p>Returns <code>Socket</code> | readonly</p>"},{"location":"reference/usertypes/peer/#peerzdo","title":"<code>peer.zdo</code>","text":"<p>Returns <code>ZDO</code> | readonly</p>"},{"location":"reference/usertypes/peer/#peerkick","title":"`peer:Kick()","text":""},{"location":"reference/usertypes/peer/#peerchatmessagemsg","title":"<code>peer:ChatMessage(msg)</code>","text":"<p>Send a basic chat message to the Peer</p>"},{"location":"reference/usertypes/peer/#peerconsolemessagemsg","title":"<code>peer:ConsoleMessage(msg)</code>","text":"<p>Send a console message to the Peer</p>"},{"location":"reference/usertypes/peer/#peercornermessagemsg","title":"<code>peer:CornerMessage(msg)</code>","text":"<p>Send a top-left screen message to the Peer</p>"},{"location":"reference/usertypes/peer/#peercentermessagemsg","title":"<code>peer:CenterMessage(msg)</code>","text":"<p>Send a top screen message to the Peer</p>"},{"location":"reference/usertypes/peer/#peerteleportpos-rot-animate","title":"<code>peer:Teleport(pos, rot, ?animate)</code>","text":"<p>Slowly teleports the player to a location.</p> <p>If <code>animate</code> is set, teleports the player with a portal overlay</p>"},{"location":"reference/usertypes/peer/#peerteleportpos-rot","title":"<code>peer:Teleport(pos, rot)</code>","text":"<p>Slowly teleports the player to a location</p> <p>Calls peer:Teleport(...) with <code>animate</code> set to false</p>"},{"location":"reference/usertypes/peer/#peerdisconnect","title":"<code>peer:Disconnect()</code>","text":"<p>Disconnect the peer from the server</p> <p>The connection will linger for a while, but the Peer will be disposed   of during the next frame</p>"},{"location":"reference/usertypes/peer/#peerinvokeselfhash-datareader","title":"<code>peer:InvokeSelf(hash, dataReader&amp;)</code>","text":"<p>Emulates an invoke call normally performed by the remote Peer</p> <p>Expects a numeric hash for the method name</p>"},{"location":"reference/usertypes/peer/#peerinvokeselfname-datareader","title":"`peer:InvokeSelf(name, dataReader&amp;)","text":""},{"location":"reference/usertypes/peer/#peerregistermethodsig-rpc","title":"<code>peer:Register(methodSig, rpc)</code>","text":"<p>Registers an Rpc function</p> <p>The register Rpc handler can return an optional boolean determining   whether the handler should unregister once finished calling.</p> <pre><code>local SIG_CompressHandshake = MethodSig.new(\"CompressHandshake\", Type.BOOL)\n\n-- in an event which provides a peer or equivalent...\npeer:Register(SIG_CompressHandshake, function(peer, enabled)\n    -- called every time the remote peer invokes 'CompressHandshake'\n\n    -- 'enabled' will be passed as a boolean\n\n    -- 'false' to dispose this rpc handler after being called\n    return false\nend)  \n</code></pre>"},{"location":"reference/usertypes/peer/#peerinvokemethodsig","title":"<code>peer:Invoke(methodSig, ...)</code>","text":"<p>Invokes a method remotely for reception by the remote peer.</p> <pre><code>local SIG_CompressHandshake = MethodSig.new(\"CompressHandshake\", Type.BOOL)\n\n-- in an event which provides a peer or equivalent...\n\n-- in the Peer:Register example above, 'true' would be passed to the handler\npeer:Invoke(SIG_CompressHandshake, true)\n</code></pre>"},{"location":"reference/usertypes/peer/#peerrouteviewtargetzdoid-methodsig","title":"<code>peer:RouteView(targetZdoid, methodSig, ...)</code>","text":"<p>Invoke a RoutedRpc function remotely.</p> <p>This is the RoutedRpc call bound to a specific Peer NetView</p> <p>The usage of this is equivalent to <code>peer:Invoke</code></p>"},{"location":"reference/usertypes/peer/#peerroutemethodsig","title":"<code>peer:Route(methodSig, ...)</code>","text":"<p>Invoke a RoutedRpc function remotely.</p>"},{"location":"reference/usertypes/prefab/","title":"Prefab","text":""},{"location":"reference/usertypes/prefab/#prefabname","title":"<code>prefab.name</code>","text":"<p>Returns <code>string</code> | Readonly</p>"},{"location":"reference/usertypes/prefab/#prefabhash","title":"<code>prefab.hash</code>","text":"<p>Returns <code>number</code> | Readonly</p>"},{"location":"reference/usertypes/prefab/#prefabanyflagspresentflags","title":"<code>prefab:AnyFlagsPresent(flags)</code>","text":"<p>Returns <code>boolean</code></p> <p>Whether all of th especified flags are present on this prefab</p>"},{"location":"reference/usertypes/prefab/#prefabanyflagspresentflags_1","title":"<code>prefab:AnyFlagsPresent(flags)</code>","text":"<p>Whether any of the specified flags are present on this prefab</p> <pre><code>local prefab = zdo.prefab\n\nif prefab:AnyFlagsPresent(Flag.BED | Flag.DOOR) then\n    -- will run if object is a bed or door\nend\n</code></pre>"},{"location":"reference/usertypes/prefab/#prefaballflagsabsentflags","title":"<code>prefab:AllFlagsAbsent(flags)</code>","text":"<p>Whether all the specified flags are absent on this prefab</p> <pre><code>local prefab = zdo.prefab\n\n-- the same as 'not prefab:AllFlagsPresent(Flag.SESSIONED)'\nif prefab:AllFlagsAbsent(Flag.SESSIONED) then\n    -- will run if object is persistent\nend  \n</code></pre>"},{"location":"reference/usertypes/prefab/#prefabanyflagsabsentflags","title":"<code>prefab:AnyFlagsAbsent(flags)</code>","text":"<p>Returns <code>boolean</code></p> <p>Whether any of the specified flags are absent from the prefab</p>"},{"location":"reference/usertypes/quaternion/","title":"Quaternion","text":"<p>A series of rotations with 4 components</p>"},{"location":"reference/usertypes/quaternion/#quaternionnew","title":"<code>Quaternion.new()</code>","text":"<p>Returns <code>Quaternion</code></p> <p>Constructs a Quaternion equivalent to Quaternion.IDENTITY</p>"},{"location":"reference/usertypes/quaternion/#quaternionnewx-y-z-w","title":"<code>Quaternion.new(x, y, z, w)</code>","text":"<p>Returns <code>Quaternion</code></p> <p>Constructs a Quaternion from x, y, z, and w parameters in    radians. </p>"},{"location":"reference/usertypes/quaternion/#quaternionidentity","title":"<code>Quaternion.IDENTITY</code>","text":"<p>Returns <code>Quaternion</code> | readonly</p> <p>An identity quaternion (0, 0, 0, 1)</p>"},{"location":"reference/usertypes/quaternion/#quaternionx","title":"<code>quaternion.x</code>","text":"<p>Returns <code>number</code></p> <p>The x rotation in radians of the quaternion</p>"},{"location":"reference/usertypes/quaternion/#quaterniony","title":"<code>quaternion.y</code>","text":"<p>Returns <code>number</code></p> <p>The y rotation in radians of the quaternion</p>"},{"location":"reference/usertypes/quaternion/#quaternionz","title":"<code>quaternion.z</code>","text":"<p>Returns <code>number</code></p> <p>The z rotation in radians of the quaternion</p>"},{"location":"reference/usertypes/quaternion/#quaternionw","title":"<code>quaternion.w</code>","text":"<p>Returns <code>number</code></p> <p>The w rotation in radians of the quaternion</p>"},{"location":"reference/usertypes/socket/","title":"Socket","text":"<p>The socket structure used throughout the game for Rpc-pings and Rpc invocations</p>"},{"location":"reference/usertypes/socket/#socketconnected","title":"<code>socket.connected</code>","text":"<p>Returns <code>boolean</code> | readonly</p> <p>Whether the socket is connected or disconnected</p>"},{"location":"reference/usertypes/socket/#socketaddress","title":"<code>socket.address</code>","text":"<p>Returns <code>string</code> | readonly</p> <p>The address of the remote socket</p>"},{"location":"reference/usertypes/socket/#sockethost","title":"<code>socket.host</code>","text":"<p>Returns <code>string</code> | readonly</p> <p>The hostname of the remote socket</p> <p>This value will always be unique for any given connection,    and can be safely used to differentiate connections.</p>"},{"location":"reference/usertypes/socket/#socketsendqueuesize","title":"<code>socket.sendQueueSize</code>","text":"<p>Returns <code>number</code> | readonly</p> <p>The total size of outgoing data in bytes. </p>"},{"location":"reference/usertypes/socket/#socketcloseflush","title":"<code>socket:Close(flush)</code>","text":"<p>Closes the socket immediately or lingers for a short time</p> <p>If flush is true:     incoming data is discarded     outgoing data is sent for the next <code>1</code> to <code>3</code> seconds</p>"},{"location":"reference/usertypes/uint64/","title":"UInt64","text":"<p>Wrapper type for 64-bit unsigned integers because of Luas inability to support them</p>"},{"location":"reference/usertypes/uint64/#uint64new","title":"<code>UInt64.new(...)</code>","text":"<p>Returns <code>UUInt64</code></p> <p><code>UInt64.new()</code>, <code>UInt64.new(number)</code>, <code>UInt64.new(lower, upper)</code>,     <code>UInt64.new(hexstring)</code></p>"},{"location":"reference/usertypes/uint64/#uint64tonumber","title":"<code>uint64:tonumber()</code>","text":"<p>Returns <code>number</code></p> <p>Directly returns the underlying value as a Lua number</p> <p>This should only be called assuming the integral value      can be represented by a double (up to numbers ~2^35)</p>"},{"location":"reference/usertypes/uint64/#metamethods-operators","title":"Metamethods / operators","text":""},{"location":"reference/usertypes/uint64/#uint64__add","title":"<code>uint64:__add()</code>","text":"<p>Returns <code>UInt64</code></p>"},{"location":"reference/usertypes/uint64/#uint64__sub","title":"<code>uint64:__sub()</code>","text":"<p>Returns <code>UInt64</code></p>"},{"location":"reference/usertypes/uint64/#uint64__mul","title":"<code>uint64:__mul()</code>","text":"<p>Returns <code>UInt64</code></p>"},{"location":"reference/usertypes/uint64/#uint64__div","title":"<code>uint64:__div()</code>","text":"<p>Returns <code>UInt64</code></p>"},{"location":"reference/usertypes/uint64/#uint64__divi","title":"<code>uint64:__divi()</code>","text":"<p>Returns <code>UInt64</code></p>"},{"location":"reference/usertypes/uint64/#uint64__unm","title":"<code>uint64:__unm()</code>","text":"<p>Returns <code>UInt64</code></p> <p>Unary minus</p> <p><code>-uint64</code></p>"},{"location":"reference/usertypes/uint64/#uint64__eq","title":"<code>uint64:__eq()</code>","text":"<p>Returns <code>UInt64</code></p>"},{"location":"reference/usertypes/uint64/#uint64__lt","title":"<code>uint64:__lt()</code>","text":"<p>Returns <code>UInt64</code></p>"},{"location":"reference/usertypes/uint64/#uint64__leq","title":"<code>uint64:__leq()</code>","text":"<p>Returns <code>UInt64</code></p>"},{"location":"reference/usertypes/userprofile/","title":"UserProfile","text":"<p>A structure to hold user data. </p>"},{"location":"reference/usertypes/userprofile/#userprofilenewname-ign-nid","title":"<code>UserProfile.new(name, ign, nid)</code>","text":"<p>Returns <code>UserProfile</code></p> <p>Constructs a <code>UserProfile</code> from a username, in-game name,    and network-id.</p>"},{"location":"reference/usertypes/userprofile/#userprofilename","title":"<code>userProfile.name</code>","text":"<p>Returns <code>string</code></p> <p>The name of the profile</p>"},{"location":"reference/usertypes/userprofile/#userprofileign","title":"<code>userProfile.ign</code>","text":"<p>Returns <code>string</code></p> <p>The in-game name of the profile</p>"},{"location":"reference/usertypes/userprofile/#userprofilenid","title":"<code>userProfile.nid</code>","text":"<p>Returns <code>string</code></p> <p>The network-id of the profile</p>"},{"location":"reference/usertypes/vector2f/","title":"Vector2f","text":"<p>A vector consisting of two floating point components</p>"},{"location":"reference/usertypes/vector2f/#vector2fnew","title":"<code>Vector2f.new()</code>","text":"<p>Returns <code>Vector2</code></p> <p>Constructs a Vector2 equivalent to Vector2.ZERO</p>"},{"location":"reference/usertypes/vector2f/#vector2fnewx-y-z","title":"<code>Vector2f.new(x, y, z)</code>","text":"<p>Returns <code>Vector2</code></p> <p>Constructs a Vector2 from x, y, and z parameters</p>"},{"location":"reference/usertypes/vector2f/#vector2fzero","title":"<code>Vector2f.ZERO</code>","text":"<p>Returns <code>Vector2</code> | readonly</p> <p>A zero vector (0, 0)</p>"},{"location":"reference/usertypes/vector2f/#vector2fx","title":"<code>vector2f.x</code>","text":"<p>Returns <code>number</code></p> <p>The x component of the vector</p>"},{"location":"reference/usertypes/vector2f/#vector2fy","title":"<code>vector2f.y</code>","text":"<p>Returns <code>number</code></p> <p>The y component of the vector</p>"},{"location":"reference/usertypes/vector2f/#vector2fmagnitude","title":"<code>vector2f.magnitude</code>","text":"<p>Result: <code>number</code> | readonly</p> <p>The length of the vector</p>"},{"location":"reference/usertypes/vector2f/#vector2fsqmagnitude","title":"<code>vector2f.sqMagnitude</code>","text":"<p>Result: <code>number</code> | readonly</p> <p>The squared length of the vector</p>"},{"location":"reference/usertypes/vector2f/#vector2fnormal","title":"<code>vector2f.normal</code>","text":"<p>Result: <code>Vector2f</code> | readonly</p> <p>Returns the unit normal vector of this</p>"},{"location":"reference/usertypes/vector2f/#vector2fdistanceother","title":"<code>vector2f:Distance(other)</code>","text":"<p>Returns <code>number</code></p> <p>The distance another vector and this</p>"},{"location":"reference/usertypes/vector2f/#vector2fsqdistanceother","title":"<code>vector2f:SqDistance(other)</code>","text":"<p>Result: <code>number</code></p> <p>The squared distance another vector and this</p>"},{"location":"reference/usertypes/vector2f/#vector2f__add","title":"<code>vector2f:__add()</code>","text":"<p>Returns <code>Vector2</code></p> <p>Adds together two vectors</p> <pre><code>local a = Vector2.new(1, 5)\nlocal b = Vector2.new(2, -1)\n\n-- (3, 4)\nlocal result = a + b\n</code></pre>"},{"location":"reference/usertypes/vector2f/#vector2f__sub","title":"<code>vector2f:__sub()</code>","text":"<p>Returns <code>Vector2</code></p> <p>Subtracts two vectors</p> <pre><code>local a = Vector2.new(6, -1)\nlocal b = Vector2.new(-3, -2)\n\n-- (9, 1)\nlocal result = a - b\n</code></pre>"},{"location":"reference/usertypes/vector2f/#vector2f__mul","title":"<code>vector2f:__mul()</code>","text":"<p>Returns <code>Vector2</code></p> <p>Multiplies two vectors</p> <pre><code>local a = Vector2.new(1, 2)\nlocal b = Vector2.new(4, 5)\n\n-- (4, 10)\nlocal result = a * b\n</code></pre>"},{"location":"reference/usertypes/vector2f/#vector2f__div","title":"<code>vector2f:__div()</code>","text":"<p>Returns <code>Vector2</code></p> <p>Divides two vectors</p> <pre><code>local a = Vector2.new(6, 4)\nlocal b = Vector2.new(3, 2)\n\n-- (2, 2)\nlocal result = a / b\n</code></pre>"},{"location":"reference/usertypes/vector2i/","title":"Vector2i","text":"<p>A vector consisting of two integer components</p>"},{"location":"reference/usertypes/vector2i/#vector2inew","title":"<code>Vector2i.new()</code>","text":"<p>Returns <code>Vector2i</code></p> <p>Constructs a Vector2i equivalent to Vector2i.ZERO</p>"},{"location":"reference/usertypes/vector2i/#vector2inewx-y-z","title":"<code>Vector2i.new(x, y, z)</code>","text":"<p>Returns <code>Vector2i</code></p> <p>Constructs a Vector2i from x, y, and z parameters</p>"},{"location":"reference/usertypes/vector2i/#vector2izero","title":"<code>Vector2i.ZERO</code>","text":"<p>Returns <code>Vector2i</code> | readonly</p> <p>A zero vector (0, 0)</p>"},{"location":"reference/usertypes/vector2i/#vector2ix","title":"<code>vector2i.x</code>","text":"<p>Returns <code>number</code></p> <p>The x component of the vector</p>"},{"location":"reference/usertypes/vector2i/#vector2iy","title":"<code>vector2i.y</code>","text":"<p>Returns <code>number</code></p> <p>The y component of the vector</p>"},{"location":"reference/usertypes/vector2i/#vector2imagnitude","title":"<code>vector2i.magnitude</code>","text":"<p>Result: <code>number</code> | readonly</p> <p>The length of the vector</p>"},{"location":"reference/usertypes/vector2i/#vector2imagnitude_1","title":"<code>vector2i.magnitude</code>","text":"<p>Result: <code>number</code> | readonly</p> <p>The squared length of the vector</p>"},{"location":"reference/usertypes/vector2i/#vector2inormal","title":"<code>vector2i.normal</code>","text":"<p>Result: <code>Vector2i</code> | readonly</p> <p>Returns the unit normal vector of this</p>"},{"location":"reference/usertypes/vector2i/#vector2idistanceother","title":"<code>vector2i:Distance(other)</code>","text":"<p>Returns <code>number</code></p> <p>The distance another vector and this</p>"},{"location":"reference/usertypes/vector2i/#vector2isqdistanceother","title":"<code>vector2i:SqDistance(other)</code>","text":"<p>Result: <code>number</code></p> <p>The squared distance another vector and this</p>"},{"location":"reference/usertypes/vector2i/#vector2i__add","title":"<code>vector2i:__add()</code>","text":"<p>Returns <code>Vector2i</code></p> <p>Adds together two vectors</p> <pre><code>local a = Vector2i.new(1, 5)\nlocal b = Vector2i.new(2, -1)\n\n-- (3, 4)\nlocal result = a + b\n</code></pre>"},{"location":"reference/usertypes/vector2i/#vector2i__sub","title":"<code>vector2i:__sub()</code>","text":"<p>Returns <code>Vector2i</code></p> <p>Subtracts two vectors</p> <pre><code>local a = Vector2i.new(6, -1)\nlocal b = Vector2i.new(-3, -2)\n\n-- (9, 1)\nlocal result = a - b\n</code></pre>"},{"location":"reference/usertypes/vector2i/#vector2i__mul","title":"<code>vector2i:__mul()</code>","text":"<p>Returns <code>Vector2i</code></p> <p>Multiplies two vectors</p> <pre><code>local a = Vector2i.new(1, 2)\nlocal b = Vector2i.new(4, 5)\n\n-- (4, 10)\nlocal result = a * b\n</code></pre>"},{"location":"reference/usertypes/vector2i/#vector2i__div","title":"<code>vector2i:__div()</code>","text":"<p>Returns <code>Vector2i</code></p> <p>Divides two vectors</p> <pre><code>local a = Vector2i.new(6, 4)\nlocal b = Vector2i.new(3, 2)\n\n-- (2, 2)\nlocal result = a / b\n</code></pre>"},{"location":"reference/usertypes/vector3f/","title":"Vector3f","text":"<p>A vector consisting of three floating point components</p>"},{"location":"reference/usertypes/vector3f/#vector3fnew","title":"<code>Vector3f.new()</code>","text":"<p>Returns <code>Vector3f</code></p> <p>Constructs a Vector3f equivalent to Vector3f.ZERO</p>"},{"location":"reference/usertypes/vector3f/#vector3fnewx-y-z","title":"<code>Vector3f.new(x, y, z)</code>","text":"<p>Returns <code>Vector3f</code></p> <p>Constructs a Vector3f from x, y, and z parameters</p>"},{"location":"reference/usertypes/vector3f/#vector3fzero","title":"<code>Vector3f.ZERO</code>","text":"<p>Returns <code>Vector3f</code></p> <p>A zero vector (0, 0, 0)</p>"},{"location":"reference/usertypes/vector3f/#vector3fx","title":"<code>vector3f.x</code>","text":"<p>Returns <code>number</code></p> <p>The x component of the vector</p>"},{"location":"reference/usertypes/vector3f/#vector3fy","title":"<code>vector3f.y</code>","text":"<p>Returns <code>number</code></p> <p>The y component of the vector</p>"},{"location":"reference/usertypes/vector3f/#vector3fz","title":"<code>vector3f.z</code>","text":"<p>Returns <code>number</code></p> <p>The z component of the vector</p>"},{"location":"reference/usertypes/vector3f/#vector3fmagnitude","title":"<code>vector3f.magnitude</code>","text":"<p>Returns <code>number</code> | readonly</p> <p>The length of the vector</p>"},{"location":"reference/usertypes/vector3f/#vector3fsqmagnitude","title":"<code>vector3f.sqMagnitude</code>","text":"<p>Returns <code>number</code> | readonly</p> <p>The squared length of the vector</p>"},{"location":"reference/usertypes/vector3f/#vector3fnormal","title":"<code>vector3f.normal</code>","text":"<p>Result: <code>Vector3f</code> | readonly</p> <p>Returns the unit normal vector of this</p>"},{"location":"reference/usertypes/vector3f/#vector3fdistanceother","title":"<code>vector3f:Distance(other)</code>","text":"<p>Returns <code>number</code></p> <p>The distance another vector and this</p>"},{"location":"reference/usertypes/vector3f/#vector3fsqdistanceother","title":"<code>vector3f:SqDistance(other)</code>","text":"<p>Returns <code>number</code></p> <p>The squared distance another vector and this</p>"},{"location":"reference/usertypes/vector3f/#vector3f__add","title":"<code>vector3f:__add()</code>","text":"<p>Returns <code>Vector3f</code></p> <p>Adds together two vectors</p> <pre><code>local a = Vector3f.new(1, 0.5, 1)\nlocal b = Vector3f.new(2, -1, -2)\n\n-- (3, -0.5, -1)\nlocal result = a + b\n</code></pre>"},{"location":"reference/usertypes/vector3f/#vector3f__sub","title":"<code>vector3f:__sub()</code>","text":"<p>Returns <code>Vector3f</code></p> <p>Subtracts two vectors</p> <pre><code>local a = Vector3f.new(6, -2.3, -4)\nlocal b = Vector3f.new(-3, -2, 2)\n\n-- (9, -0.3, -6)\nlocal result = a - b\n</code></pre>"},{"location":"reference/usertypes/vector3f/#vector3f__mul","title":"<code>vector3f:__mul()</code>","text":"<p>Returns <code>Vector3f</code></p> <p>Multiplies two vectors</p> <pre><code>local a = Vector3f.new(1, 2, 3)\nlocal b = Vector3f.new(4, 5, 6)\n\n-- (4, 10, 18)\nlocal result = a * b\n</code></pre>"},{"location":"reference/usertypes/vector3f/#vector3f__div","title":"<code>vector3f:__div()</code>","text":"<p>Returns <code>Vector3f</code></p> <p>Divides two vectors</p> <pre><code>local a = Vector3f.new(6, 4, 10)\nlocal b = Vector3f.new(3, 2, 2)\n\n-- (2, 2, 5)\nlocal result = a / b\n</code></pre>"},{"location":"reference/usertypes/zdo/","title":"ZDO","text":"<p>The bread-and-butter of Valhiem</p> <p>This class represents automatically synchronized networked objects  and states throughout Valheim gameplay. </p>"},{"location":"reference/usertypes/zdo/#zdoid","title":"<code>zdo.id</code>","text":"<p>Returns <code>ZDOID</code> | readonly</p> <p>The id of the zdo</p>"},{"location":"reference/usertypes/zdo/#zdopos","title":"<code>zdo.pos</code>","text":"<p>Returns <code>Vector3f</code></p> <p>The position of the zdo</p>"},{"location":"reference/usertypes/zdo/#zdozone","title":"<code>zdo.zone</code>","text":"<p>Returns <code>Vector2i</code> | readonly</p> <p>The current zone the zdo is contained within</p>"},{"location":"reference/usertypes/zdo/#zdorot","title":"<code>zdo.rot</code>","text":"<p>Returns <code>Quaternion</code></p> <p>The rotation of the zdo</p>"},{"location":"reference/usertypes/zdo/#zdoprefab","title":"<code>zdo.prefab</code>","text":"<p>Returns <code>Prefab</code></p>"},{"location":"reference/usertypes/zdo/#zdoowner","title":"<code>zdo.owner</code>","text":"<p>Returns <code>Int64</code></p>"},{"location":"reference/usertypes/zdo/#zdoisowneruuid","title":"<code>zdo:IsOwner(uuid)</code>","text":"<p>Returns <code>boolean</code></p> <p>Checks whether the specified uuid is the owner of the zdo</p>"},{"location":"reference/usertypes/zdo/#zdoislocal","title":"<code>zdo:IsLocal</code>","text":"<p>Returns <code>boolean</code></p> <p>Whether the zdo is owned by the server</p>"},{"location":"reference/usertypes/zdo/#zdosetlocal","title":"<code>zdo:SetLocal</code>","text":"<p>Set the server as the owner of the ZDO</p>"},{"location":"reference/usertypes/zdo/#zdohasowner","title":"<code>zdo:HasOwner()</code>","text":"<p>Returns <code>boolean</code></p> <p>Returns whether this zdo has an owner</p>"},{"location":"reference/usertypes/zdo/#zdodisown","title":"<code>zdo:Disown()</code>","text":"<p>Sets the zdo's owner to 0</p>"},{"location":"reference/usertypes/zdo/#zdodatarev","title":"<code>zdo.dataRev</code>","text":"<p>Returns the zdo's data revision number</p>"},{"location":"reference/usertypes/zdo/#zdoownerrev","title":"<code>zdo.ownerRev</code>","text":"<p>Returns the zdo's owner revision number</p>"},{"location":"reference/usertypes/zdo/#zdotickscreated","title":"<code>zdo.ticksCreated</code>","text":"<p>Returns the time in ticks the zdo was created</p>"},{"location":"reference/usertypes/zdo/#get-set","title":"Get / Set","text":"<p>A zdo has several named getter and setter types</p> <p><code>GetFloat</code>, <code>GetInt</code>, <code>GetLong</code>, <code>GetQuaternion</code>, <code>GetString</code>,    <code>GetBytes</code>, <code>GetBool</code>, <code>GetZDOID</code> <pre><code>zdo:Get&lt;&gt;(hash, default)\nzdo:Get&lt;&gt;(hash)\nzdo:Get&lt;&gt;(name, default)\nzdo:Get&lt;&gt;(name)\n</code></pre></p> <p><code>SetFloat</code>, <code>SetInt</code>, <code>Set</code> <pre><code>zdo:Set&lt;&gt;(hash, value)\nzdo:Set&lt;&gt;(name, value)  \n</code></pre></p> <p>The overload <code>Set(...)</code> accepts any of the above non-numeric types</p> <p>Any usage of a long (64-bit integer) utilizes a <code>Int64</code> and is overloaded     by <code>Set(...)</code></p>"},{"location":"reference/usertypes/zdoid/","title":"ZDOID","text":"<p>A ZDO identity structure</p>"},{"location":"reference/usertypes/zdoid/#zdoidnewuuid-id","title":"<code>ZDOID.new(uuid, id)</code>","text":"<p>Returns <code>ZDOID</code></p> <p>Constructs a ZDOID from a <code>int64</code> uuid and a numeric id</p>"},{"location":"reference/usertypes/zdoid/#zdoidnone","title":"<code>ZDOID.NONE</code>","text":"<p>A zero ZDOID (0, 0)</p>"},{"location":"reference/usertypes/zdoid/#zdoiduuid","title":"<code>zdoid.uuid</code>","text":"<p>Returns <code>Int64</code></p> <p>The uuid of the zdoid as a <code>int64</code></p>"},{"location":"reference/usertypes/zdoid/#zdoidid","title":"<code>zdoid.id</code>","text":"<p>Returns <code>number</code></p> <p>The id of the zdoid</p>"}]}